import main

puzzles = [main.Puzzle("070583020059200300340006507795000632003697100680002700914835076030701495567429013"),
           main.Puzzle("790058200004607058503002670040270506039500180670019002900701004068005700307480025"),
           main.Puzzle("913000500607000024050080070079000000002090043000004090040001900706009005001006407"),
           main.Puzzle("926571483351486279874923516582367194149258367763100825238700651617835942495612738"),
           main.Puzzle("270583020059200300340006507795000632003697100680002700914835076030701495567429013"),
           main.Puzzle("000000000000000000000000000000000000000000000000000000000000000000000000000000008"),
           main.Puzzle("790058270004607058503002670040270506039500180670019002900701004068005700307480025"),
           main.Puzzle("176583924859274361342916587795148632423697158681352749914835276238761495567429813"),
           ]

game = main.Game()


def test_num_solutions():
    assert puzzles[0].num_solutions() == 1
    assert puzzles[1].num_solutions() == 1
    assert puzzles[2].num_solutions() == 1
    assert puzzles[3].num_solutions() == 2
    assert puzzles[4].num_solutions() == 0
    assert puzzles[5].num_solutions() == 2
    assert puzzles[6].num_solutions() == 0


def test_solve():
    puzzles[0].solve()
    puzzles[1].solve()
    puzzles[2].solve()
    assert [cell.val for cell in puzzles[0].squares] == ['1', '7', '6', '5', '8', '3', '9', '2', '4', '8', '5', '9',
                                                         '2', '7', '4', '3', '6', '1', '3', '4', '2', '9', '1', '6',
                                                         '5', '8', '7', '7', '9', '5', '1', '4', '8', '6', '3', '2',
                                                         '4', '2', '3', '6', '9', '7', '1', '5', '8', '6', '8', '1',
                                                         '3', '5', '2', '7', '4', '9', '9', '1', '4', '8', '3', '5',
                                                         '2', '7', '6', '2', '3', '8', '7', '6', '1', '4', '9', '5',
                                                         '5', '6', '7', '4', '2', '9', '8', '1', '3']
    assert [cell.val for cell in puzzles[1].squares] == ['7', '9', '6', '3', '5', '8', '2', '4', '1', '1', '2', '4',
                                                         '6', '9', '7', '3', '5', '8', '5', '8', '3', '1', '4', '2',
                                                         '6', '7', '9', '8', '4', '1', '2', '7', '3', '5', '9', '6',
                                                         '2', '3', '9', '5', '6', '4', '1', '8', '7', '6', '7', '5',
                                                         '8', '1', '9', '4', '3', '2', '9', '5', '2', '7', '3', '1',
                                                         '8', '6', '4', '4', '6', '8', '9', '2', '5', '7', '1', '3',
                                                         '3', '1', '7', '4', '8', '6', '9', '2', '5']
    assert [cell.val for cell in puzzles[2].squares] == ['9', '1', '3', '4', '2', '7', '5', '8', '6', '6', '8', '7',
                                                         '9', '1', '5', '3', '2', '4', '2', '5', '4', '6', '8', '3',
                                                         '1', '7', '9', '4', '7', '9', '1', '3', '2', '6', '5', '8',
                                                         '1', '6', '2', '5', '9', '8', '7', '4', '3', '5', '3', '8',
                                                         '7', '6', '4', '2', '9', '1', '3', '4', '5', '8', '7', '1',
                                                         '9', '6', '2', '7', '2', '6', '3', '4', '9', '8', '1', '5',
                                                         '8', '9', '1', '2', '5', '6', '4', '3', '7']


def test_reset():
    puzzles[0].reset()
    assert [cell.val for cell in puzzles[0].squares] == ['0', '7', '0', '5', '8', '3', '0', '2', '0', '0', '5', '9',
                                                         '2', '0', '0', '3', '0', '0', '3', '4', '0', '0', '0', '6',
                                                         '5', '0', '7', '7', '9', '5', '0', '0', '0', '6', '3', '2',
                                                         '0', '0', '3', '6', '9', '7', '1', '0', '0', '6', '8', '0',
                                                         '0', '0', '2', '7', '0', '0', '9', '1', '4', '8', '3', '5',
                                                         '0', '7', '6', '0', '3', '0', '7', '0', '1', '4', '9', '5',
                                                         '5', '6', '7', '4', '2', '9', '0', '1', '3']


def test_check_valid():
    assert puzzles[0].check_valid() is True
    assert puzzles[6].check_valid() is False


def test_change_value():
    puzzles[0].change_value(1, "1")
    puzzles[0].change_value(2, "7")
    puzzles[0].change_value(2, "2")
    puzzles[0].change_value(9, "4")
    assert [cell.val for cell in puzzles[0].squares] == ['0', '7', '2', '5', '8', '3', '0', '2', '0', '4', '5', '9',
                                                         '2', '0', '0', '3', '0', '0', '3', '4', '0', '0', '0', '6',
                                                         '5', '0', '7', '7', '9', '5', '0', '0', '0', '6', '3', '2',
                                                         '0', '0', '3', '6', '9', '7', '1', '0', '0', '6', '8', '0',
                                                         '0', '0', '2', '7', '0', '0', '9', '1', '4', '8', '3', '5',
                                                         '0', '7', '6', '0', '3', '0', '7', '0', '1', '4', '9', '5',
                                                         '5', '6', '7', '4', '2', '9', '0', '1', '3']


def test_completed():
    assert puzzles[0].completed is False
    assert puzzles[7].completed is True


def test_load_game():
    assert game.puzzle is None
    assert game.load_game("user",
                          "070583020059200300340006507795000632003697100680002700914835076030701495567429013") is True
    assert game.load_game("user",
                          "07058302005920030034000650779500063200369710068000270091483507603070149556742901") is False
    assert [cell.val for cell in game.puzzle.squares] == ['0', '7', '0', '5', '8', '3', '0', '2', '0', '0', '5', '9',
                                                          '2', '0', '0', '3', '0', '0', '3', '4', '0', '0', '0', '6',
                                                          '5', '0', '7', '7', '9', '5', '0', '0', '0', '6', '3', '2',
                                                          '0', '0', '3', '6', '9', '7', '1', '0', '0', '6', '8', '0',
                                                          '0', '0', '2', '7', '0', '0', '9', '1', '4', '8', '3', '5',
                                                          '0', '7', '6', '0', '3', '0', '7', '0', '1', '4', '9', '5',
                                                          '5', '6', '7', '4', '2', '9', '0', '1', '3']
    assert game.load_game("load", "10") is True
    assert game.load_game("load", "1000") is False

def test_sandwich():
    assert puzzles[0].sandwich() == ([29, 22, 0, 5, 7, 21, 0, 4, 8], [28, 10, 10, 0, 4, 0, 14, 0, 17])
    assert puzzles[1].sandwich() == ([28, 12, 19, 17, 15, 0, 17, 14, 25], [21, 35, 0, 22, 17, 0, 19, 17, 8])
